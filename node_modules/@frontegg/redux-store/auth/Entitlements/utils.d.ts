import { EntitledToOptions, Entitlement } from './interfaces';
import { UserEntitlementsContext as UserEntitlementsResponseV2 } from '@frontegg/entitlements-javascript-commons';
import { Attributes } from '@frontegg/entitlements-javascript-commons';
/**
  @param entitlements
  @param key permission key
  @param attributes entitlements query attributes including consumer and frontegg attributes
  @param isV2 not in use. should be removed after removing from frontegg-vue
  @returns if the user is entitled to the given permission. Attaching the justification if not
  @throws when entitlement is not enabled via frontegg options
 */
export declare const getPermissionEntitlements: (entitlements: UserEntitlementsResponseV2 | undefined, key: string, attributes?: Attributes | undefined, isV2?: boolean | undefined) => Entitlement;
/**
  @param entitlements
  @param key feature key
  @param attributes entitlements query attributes including consumer and frontegg attributes
  @param isV2 not in use. should be removed after removing from frontegg-vue
  @returns if the user is entitled to the given feature. Attaching the justification if not
  @throws when entitlement is not enabled via frontegg options
 */
export declare const getFeatureEntitlements: (entitlements: UserEntitlementsResponseV2 | undefined, key: string, attributes?: Attributes | undefined, isV2?: boolean | undefined) => Entitlement;
/**
  @param entitlements
  @param options including permission or feature
  @param attributes entitlements query attributes including consumer and frontegg attributes
  @param isV2 not in use. should be removed after removing from frontegg-vue
  @returns if the user is entitled to the given feature or permission (check only one). Attaching the justification if not
  @throws when entitlement is not enabled via frontegg options
 */
export declare const getEntitlements: (entitlements: UserEntitlementsResponseV2 | undefined, options: EntitledToOptions, attributes?: Attributes | undefined, isV2?: boolean | undefined) => Entitlement;
