import _extends from "@babel/runtime/helpers/esm/extends";
import { api, ApplicationAccessType } from '@frontegg/rest-api';
import { call, put, select, takeLeading } from 'redux-saga/effects';
import { errorHandler } from '../../utils';
import { actions } from '../reducer';
import { getFeatureFlags } from '../../helpers';
import { getFlattenAppIds } from './utils/getFlattenAppIds';
const ASSIGNMENT_DEFAULT_ERROR_MESSAGE = 'Assignment action failed. Try again or contact support.';
export function* loadUserApplications() {
  yield put(actions.setApplicationsState({
    loading: true,
    fetching: true
  }));
  try {
    const userId = yield select(({
      auth
    }) => {
      var _auth$user;
      return auth == null ? void 0 : (_auth$user = auth.user) == null ? void 0 : _auth$user.id;
    });
    const appIds = yield call(api.applications.getUserApplicationsId, {
      userId
    });
    const userApplications = yield call(api.applications.getApplicationsData, {
      appIds
    });
    yield put(actions.setApplicationsState({
      userApplications,
      fetching: false,
      loading: false
    }));
  } catch (e) {
    yield put(actions.setApplicationsState({
      loading: false,
      fetching: false,
      error: errorHandler(e)
    }));
  }
}
export function* loadAccountApplications() {
  yield put(actions.setApplicationsState({
    loading: true,
    fetching: true
  }));
  try {
    const tenantAppIds = yield call(api.applications.getTenantsApplications);
    const appIds = getFlattenAppIds(tenantAppIds);
    const accountApplications = yield call(api.applications.getApplicationsData, {
      appIds
    });
    const usersOfApplications = yield call(api.applications.getUsersOfApplications, {
      appIds
    });
    const accountApplicationsWithUsers = accountApplications.map(app => {
      var _usersOfApplications$;
      return _extends({}, app, {
        userIds: (_usersOfApplications$ = usersOfApplications.find(u => u.appId === app.id)) == null ? void 0 : _usersOfApplications$.userIds
      });
    });
    yield put(actions.setApplicationsState({
      accountApplications: accountApplicationsWithUsers,
      fetching: false,
      loading: false
    }));
  } catch (e) {
    yield put(actions.setApplicationsState({
      loading: false,
      fetching: false,
      error: errorHandler(e)
    }));
  }
}
export function* loadMultipleUsersApplications({
  userIds
}) {
  try {
    const usersAppIds = yield call(api.applications.getUsersApplicationsId, {
      userIds
    });
    const appIds = getFlattenAppIds(usersAppIds);
    const accountApplications = yield call(api.applications.getApplicationsData, {
      appIds
    });
    return userIds.reduce((acc, userId) => {
      var _usersAppIds$find, _userAppIds$map$filte, _userAppIds$map;
      const userAppIds = (_usersAppIds$find = usersAppIds.find(app => app.userId == userId)) == null ? void 0 : _usersAppIds$find.appIds;
      acc[userId] = [...accountApplications.filter(app => app.accessType === ApplicationAccessType.FREE_ACCESS), ...((_userAppIds$map$filte = userAppIds == null ? void 0 : (_userAppIds$map = userAppIds.map(appId => accountApplications.find(app => appId === app.id))) == null ? void 0 : _userAppIds$map.filter(app => !!app)) != null ? _userAppIds$map$filte : [])];
      return acc;
    }, {});
  } catch (e) {
    yield put(actions.setApplicationsState({
      error: errorHandler(e)
    }));
  }
}
export function* assignUserToApps({
  payload
}) {
  const {
    userId,
    appIds,
    callback
  } = payload;
  try {
    var _select, _accountApps$filter;
    const tenantId = yield select(({
      auth
    }) => {
      var _auth$user2;
      return auth == null ? void 0 : (_auth$user2 = auth.user) == null ? void 0 : _auth$user2.tenantId;
    });
    yield call(api.applications.assignUserToApplications, {
      userId,
      appIds,
      tenantId
    });
    const accountApps = yield (_select = select(({
      auth
    }) => {
      var _auth$applicationsSta;
      return auth == null ? void 0 : (_auth$applicationsSta = auth.applicationsState) == null ? void 0 : _auth$applicationsSta.accountApplications;
    })) != null ? _select : [];
    const users = yield select(({
      auth
    }) => {
      var _auth$teamState;
      return auth == null ? void 0 : (_auth$teamState = auth.teamState) == null ? void 0 : _auth$teamState.users;
    });
    const newApps = (_accountApps$filter = accountApps == null ? void 0 : accountApps.filter(app => appIds.includes(app.id))) != null ? _accountApps$filter : [];
    if (newApps != null && newApps.length) {
      yield put(actions.setTeamState({
        users: users.map(user => {
          var _user$applications;
          return user.id === userId ? _extends({}, user, {
            applications: [...((_user$applications = user.applications) != null ? _user$applications : []), ...newApps]
          }) : user;
        })
      }));
    }
    callback == null ? void 0 : callback(true);
  } catch (e) {
    yield put(actions.setApplicationsState({
      error: errorHandler(e, ASSIGNMENT_DEFAULT_ERROR_MESSAGE)
    }));
    callback == null ? void 0 : callback(false);
  }
}
export function* unassignUserFromApps({
  payload
}) {
  const {
    userId,
    appIds,
    callback
  } = payload;
  try {
    var _users$find;
    const tenantId = yield select(({
      auth
    }) => {
      var _auth$user3;
      return auth == null ? void 0 : (_auth$user3 = auth.user) == null ? void 0 : _auth$user3.tenantId;
    });
    yield call(api.applications.unassignUserFromApplications, {
      userId,
      appIds,
      tenantId
    });
    const users = yield select(({
      auth
    }) => {
      var _auth$teamState2;
      return auth == null ? void 0 : (_auth$teamState2 = auth.teamState) == null ? void 0 : _auth$teamState2.users;
    });
    const userApps = (_users$find = users.find(user => user.id === userId)) == null ? void 0 : _users$find.applications;
    if (userApps != null && userApps.length && appIds.length) {
      yield put(actions.setTeamState({
        users: users.map(user => user.id === userId ? _extends({}, user, {
          applications: userApps.filter(app => !appIds.includes(app.id))
        }) : user)
      }));
    }
    callback == null ? void 0 : callback(true);
  } catch (e) {
    yield put(actions.setApplicationsState({
      error: errorHandler(e, ASSIGNMENT_DEFAULT_ERROR_MESSAGE)
    }));
    callback == null ? void 0 : callback(false);
  }
}
export function* assignNewUserToApps({
  appIds,
  user
}) {
  var _apps$filter;
  const [multiAppsFlag] = yield call(getFeatureFlags, ['multi-apps-admin-portal']);
  if (!multiAppsFlag) {
    return;
  }
  const apps = yield select(({
    auth
  }) => {
    var _auth$applicationsSta2;
    return auth == null ? void 0 : (_auth$applicationsSta2 = auth.applicationsState) == null ? void 0 : _auth$applicationsSta2.accountApplications;
  });
  const defaultApps = (_apps$filter = apps == null ? void 0 : apps.filter(app => app.accessType === ApplicationAccessType.FREE_ACCESS)) != null ? _apps$filter : [];
  if (appIds != null && appIds.length) {
    const tenantId = yield select(({
      auth
    }) => {
      var _auth$user4;
      return auth == null ? void 0 : (_auth$user4 = auth.user) == null ? void 0 : _auth$user4.tenantId;
    });
    yield call(api.applications.assignUserToApplications, {
      userId: user.id,
      appIds,
      tenantId
    });
    return appIds.map(appId => {
      var _apps$find;
      return (_apps$find = apps == null ? void 0 : apps.find(app => app.id === appId)) != null ? _apps$find : [];
    }).concat(defaultApps);
  } else {
    return defaultApps;
  }
}
export function* mapUsersWithApplicationData({
  shouldLoadApps,
  users
}) {
  const [multiAppsFlag] = yield call(getFeatureFlags, ['multi-apps-admin-portal']);
  if (!multiAppsFlag || !shouldLoadApps) {
    return users;
  }
  const userIds = users.map(user => user.id);
  const userApps = yield call(loadMultipleUsersApplications, {
    userIds
  });
  if (!userApps) {
    return users;
  }
  return users.map(user => userApps != null && userApps[user.id] ? _extends({}, user, {
    applications: userApps[user.id]
  }) : user);
}
export function* applicationsSaga() {
  yield takeLeading(actions.loadUserApplications, loadUserApplications);
  yield takeLeading(actions.loadAccountApplications, loadAccountApplications);
  yield takeLeading(actions.assignUserToApps, assignUserToApps);
  yield takeLeading(actions.unassignUserFromApps, unassignUserFromApps);
}