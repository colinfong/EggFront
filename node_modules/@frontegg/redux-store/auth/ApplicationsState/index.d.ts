import { ApplicationsState, UserAppsAssignmentPayload } from './interfaces';
import { WithCallback } from '../../interfaces';
declare const applicationsState: ApplicationsState;
declare const reducers: {
    setApplicationsState: {
        prepare: (payload: Partial<ApplicationsState>) => {
            payload: Partial<ApplicationsState>;
        };
        reducer: (state: import("..").AuthState, { payload }: {
            payload: Partial<ApplicationsState>;
            type: string;
        }) => {
            onRedirectTo: (path: string, opts?: import("@frontegg/rest-api").RedirectOptions | undefined) => void;
            error?: any;
            isAuthenticated: boolean;
            userIp?: string | undefined;
            isLoading: boolean;
            keepSessionAlive?: boolean | undefined;
            socialLoginOptions?: {
                promptConsent?: boolean | undefined;
            } | undefined;
            user?: import("..").User | null | undefined;
            isSSOAuth: boolean;
            ssoACS?: string | undefined;
            includeQueryParam?: boolean | undefined;
            loginState: import("..").LoginState;
            activateState: import("..").ActivateAccountState;
            acceptInvitationState: import("..").AcceptInvitationState;
            forgotPasswordState: import("..").ForgotPasswordState;
            resetPhoneNumberState: import("..").ResetPhoneNumberState;
            ssoState: import("..").SSOState;
            profileState: import("..").ProfileState;
            mfaState: import("..").MFAState;
            teamState: import("..").TeamState;
            groupsState: import("..").GroupsState;
            groupsDialogsState: import("..").GroupsDialogsState;
            socialLoginState: import("..").SocialLoginState;
            signUpState: import("..").SignUpState;
            apiTokensState: import("..").ApiTokensState;
            securityPolicyState: import("..").SecurityPolicyState;
            restrictionsState: import("..").RestrictionsState;
            provisioningState: import("..").ProvisioningState;
            accountSettingsState: import("..").AccountSettingsState;
            tenantsState: import("..").TenantsState;
            rolesState: import("..").RolesState;
            sessionsState: import("..").SessionsState;
            hostedLoginBox?: boolean | undefined;
            disableSilentRefresh?: boolean | undefined;
            sessionsPolicyState: import("..").SessionsPolicyState;
            impersonateState?: import("..").ImpersonateState | undefined;
            passkeysState?: import("..").PasskeysState | undefined;
            customLoginState?: import("..").CustomLoginState | undefined;
            allAccountsState?: import("..").IAllAccountsState | undefined;
            allAccountsDialogsState?: import("..").IAllAccountsDialogsState | undefined;
            securityCenterState?: import("..").SecurityCenterState | undefined;
            smsState?: import("..").SmsState | undefined;
            stepUpState?: import("..").StepUpState | undefined;
            applicationsState?: ApplicationsState | undefined;
            routes: import("..").AuthPageRoutes;
            header?: any;
            loaderComponent?: any;
        };
    };
};
declare const actions: {
    loadUserApplications: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    loadAccountApplications: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    assignUserToApps: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<Pick<import("@frontegg/rest-api").IAssignUserToApplicationsBody, "userId" | "appIds">, boolean>], WithCallback<Pick<import("@frontegg/rest-api").IAssignUserToApplicationsBody, "userId" | "appIds">, boolean>, string, never, never>;
    unassignUserFromApps: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<Pick<import("@frontegg/rest-api").IAssignUserToApplicationsBody, "userId" | "appIds">, boolean>], WithCallback<Pick<import("@frontegg/rest-api").IAssignUserToApplicationsBody, "userId" | "appIds">, boolean>, string, never, never>;
};
/**
 *  To be used for actions types after dispatch, and should contains
 *  the reducers and actions as standalone function
 */
declare type DispatchedActions = {
    setApplicationsState: (state: Partial<ApplicationsState>) => void;
    loadUserApplications: () => void;
    loadAccountApplications: () => void;
    assignUserToApps: (payload: WithCallback<UserAppsAssignmentPayload>) => void;
    unassignUserFromApps: (payload: WithCallback<UserAppsAssignmentPayload>) => void;
};
export declare type ApplicationsActions = DispatchedActions;
export { applicationsState, reducers as applicationsReducers, actions as applicationsActions };
