import { IApplicationsResponse, IUsersOfApplicationsResponse, ITenantApplicationsResponse, ITeamUser, IUsersApplicationsIdsResponse } from '@frontegg/rest-api';
import { ApplicationsState, UserAppsAssignmentPayload } from './interfaces';
import { WithCallback } from '../../interfaces';
import { PayloadAction } from '@reduxjs/toolkit';
import { ITeamStateUser } from '../TeamState/interfaces';
export declare function loadUserApplications(): Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<string[]> | import("redux-saga/effects").PutEffect<{
    payload: Partial<ApplicationsState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<IApplicationsResponse[]>, void, string & string[] & IApplicationsResponse[]>;
export declare function loadAccountApplications(): Generator<import("redux-saga/effects").PutEffect<{
    payload: Partial<ApplicationsState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<IApplicationsResponse[]> | import("redux-saga/effects").CallEffect<ITenantApplicationsResponse[]> | import("redux-saga/effects").CallEffect<IUsersOfApplicationsResponse[]>, void, ITenantApplicationsResponse[] & IApplicationsResponse[] & IUsersOfApplicationsResponse[]>;
export declare function loadMultipleUsersApplications({ userIds }: {
    userIds: string[];
}): Generator<import("redux-saga/effects").PutEffect<{
    payload: Partial<ApplicationsState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<IApplicationsResponse[]> | import("redux-saga/effects").CallEffect<IUsersApplicationsIdsResponse[]>, Record<string, IApplicationsResponse[]> | undefined, IUsersApplicationsIdsResponse[] & IApplicationsResponse[]>;
export declare function assignUserToApps({ payload }: PayloadAction<WithCallback<UserAppsAssignmentPayload>>): Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<void> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../TeamState/interfaces").TeamState>;
    type: string;
}> | import("redux-saga/effects").PutEffect<{
    payload: Partial<ApplicationsState>;
    type: string;
}>, void, string & (IApplicationsResponse & {
    userIds?: string[] | undefined;
})[] & ITeamStateUser[]>;
export declare function unassignUserFromApps({ payload }: PayloadAction<WithCallback<UserAppsAssignmentPayload>>): Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<void> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../TeamState/interfaces").TeamState>;
    type: string;
}> | import("redux-saga/effects").PutEffect<{
    payload: Partial<ApplicationsState>;
    type: string;
}>, void, string & ITeamStateUser[]>;
export declare function assignNewUserToApps({ appIds, user }: {
    appIds?: string[];
    user: ITeamUser;
}): Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<void> | import("redux-saga/effects").CallEffect<boolean[]>, ((IApplicationsResponse & {
    userIds?: string[] | undefined;
}) | never[])[] | undefined, boolean[] & (IApplicationsResponse & {
    userIds?: string[] | undefined;
})[] & string>;
export declare function mapUsersWithApplicationData({ shouldLoadApps, users, }: {
    shouldLoadApps?: boolean;
    users: ITeamUser[];
}): Generator<import("redux-saga/effects").CallEffect<boolean[]> | import("redux-saga/effects").CallEffect<Record<string, IApplicationsResponse[]> | undefined>, ITeamUser[], boolean[] & Record<string, IApplicationsResponse[]>>;
export declare function applicationsSaga(): Generator<import("redux-saga/effects").ForkEffect<never>, void, unknown>;
