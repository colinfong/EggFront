"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePermissionEntitlements = exports.useFeatureEntitlements = exports.useEntitlementsOptions = exports.useEntitlementsActions = exports.useEntitlements = void 0;
var _reduxStore = require("@frontegg/redux-store");
var _hooks = require("./hooks");
var _react = require("react");
var _common = require("../common");
var _flags = require("../flags");
/**
 * @returns entitlemenets state as stored in the user
 */
const useEntitlementsState = () => (0, _hooks.useAuth)(({
  user
}) => user == null ? void 0 : user.entitlements);

/**
 * @returns user state
 */
const useUserState = () => (0, _hooks.useAuth)(({
  user
}) => user);

/**
 * @param customAttributes user attributes
 * @returns is entitled query data including: entitlements state and final attributes (consumer and frontegg)
 */
const useEntitlementsQueryData = customAttributes => {
  const user = useUserState();
  const entitlements = useEntitlementsState();
  const attributes = {
    custom: customAttributes,
    jwt: user
  };
  return {
    entitlements,
    attributes
  };
};

/**
  @param key feature key
  @param customAttributes user attributes
  @returns if the user is entitled to the given feature and attributes. Attaching the justification if not
*/
const useFeatureEntitlements = (key, customAttributes) => {
  const {
    entitlements,
    attributes
  } = useEntitlementsQueryData(customAttributes);
  return (0, _reduxStore.getFeatureEntitlements)(entitlements, key, attributes);
};

/**
  @param key permission key
  @param customAttributes user attributes
  @returns if the user is entitled to the given permission and attributes. Attaching the justification if not
*/
exports.useFeatureEntitlements = useFeatureEntitlements;
const usePermissionEntitlements = (key, customAttributes) => {
  const {
    entitlements,
    attributes
  } = useEntitlementsQueryData(customAttributes);
  return (0, _reduxStore.getPermissionEntitlements)(entitlements, key, attributes);
};

/**
  @param entitledToOptions including permission or feature key
  @param customAttributes user attributes
  @returns if the user is entitled to the given feature or permission and attributes (check only one). Attaching the justification if not
*/
exports.usePermissionEntitlements = usePermissionEntitlements;
const useEntitlements = (options, customAttributes) => {
  const {
    entitlements,
    attributes
  } = useEntitlementsQueryData(customAttributes);
  return (0, _reduxStore.getEntitlements)(entitlements, options, attributes);
};

/**
 @param entitledToOptions including permission or feature key
 @returns an action your can use to detect if the user is entitled to the given feature or permission (check only one). Attaching the justification if not
 */
exports.useEntitlements = useEntitlements;
const useEntitlementsActions = () => {
  // this code is duplicated because React is yelling when using useEntitlementsQueryData inside the isEntitledTo function because it's not a hook
  const user = useUserState();
  const entitlements = useEntitlementsState();
  return (0, _react.useMemo)(() => ({
    isEntitledTo: (options, customAttributes) => {
      const attributes = {
        custom: customAttributes,
        jwt: user
      };
      return (0, _reduxStore.getEntitlements)(entitlements, options, attributes);
    }
  }), [user, entitlements]);
};

/**
 @returns if the option to use entitlements is enabled
  */
exports.useEntitlementsActions = useEntitlementsActions;
const useEntitlementsOptions = () => {
  var _entitlementsOptions$;
  const {
    entitlementsOptions
  } = (0, _common.useShadowDom)();
  const isEntitlementsEnabled = (_entitlementsOptions$ = entitlementsOptions == null ? void 0 : entitlementsOptions.enabled) != null ? _entitlementsOptions$ : false;
  const {
    isEntitledTo
  } = useEntitlementsActions();
  const [verifyIsEntitledFF] = (0, _flags.useFeatureFlags)(['admin-portal-use-is-entitled']);
  return {
    isEntitlementsEnabled,
    isEntitledTo,
    verifyIsEntitledFF
  };
};
exports.useEntitlementsOptions = useEntitlementsOptions;